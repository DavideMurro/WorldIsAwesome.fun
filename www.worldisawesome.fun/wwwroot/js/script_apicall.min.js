var experienceMediaCache={},userProfilePictureCache={},placeProfilePictureCache={},experienceMediaPreviewCache={},userProfilePicturePreviewCache={},placeProfilePicturePreviewCache={};async function apiCall(e,t,r,a){try{let c=new URL(apiUri+e),n={method:t,credentials:"include"};switch(t){case"GET":r&&Object.keys(r).forEach(e=>c.searchParams.append(e,r[e]));break;case"POST":let e=new FormData;r&&Object.keys(r).forEach(t=>e.append(t,r[t])),n.body=e}if("blob"==a)return c;{let e=await fetch(c,n);if(e.ok){let t;switch(a){case"json":t=await e.json();break;case"blob":t=await e.blob();break;default:t=await e}return t}{var i=await e.json();let t;switch(i.Status=e.status,i.Status){case 400:break;case 401:t=i.ErrorMessage,t+="<br/><br/>Please, <a href='/Login?Redirect="+window.location.href+"' title='Login'>Login</a>",setAppStatus(appStatusMap[3],t);break;case 404:t=i.ErrorMessage,t+="<br/><br/>Please, <a href='/' title='Home'>Go Home</a>",setAppStatus(appStatusMap[3],t)}throw i}}}catch(e){throw e}}async function CheckLogin(){try{let e=await apiCall("CheckLogin","GET",null,"json");return userLogged=e,param_userId&&userLogged&&isEquals(param_userId,userLogged.id)&&(isUserMine=!0,document.body.classList.add("ismine")),setUserStatus(userStatusMap[1]),e}catch(e){throw setUserStatus(userStatusMap[2]),e}}async function Login(e,t,r){try{let a={username:e,password:t,isRememberMe:r},i=await apiCall("Login","POST",a,"json");return userLogged=i,setUserStatus(userStatusMap[1]),i}catch(e){throw setUserStatus(userStatusMap[2]),e}}async function Logout(){try{await apiCall("Logout","POST",null,"json");userLogged=null,setUserStatus(userStatusMap[2])}catch(e){throw e}}async function GetUserList(e,t=!1,r=!1,a,i){try{let c={isAlsoNotActive:t};return e&&(c.searchText=e),r&&(c.isRandom=r),a&&(c.takeOffset=a),i&&(c.takeCount=i),await apiCall("GetUserList","GET",c,"json")}catch(e){throw e}}async function GetUser(e){try{let t={userId:e};return await apiCall("GetUser","GET",t,"json")}catch(e){throw e}}async function GetUserPicture(e,t=!1){if(!t&&userProfilePictureCache[e])return userProfilePictureCache[e];if(t&&userProfilePicturePreviewCache[e])return userProfilePicturePreviewCache[e];try{let r={pictureId:e,isPreview:t},a=await apiCall("GetUserPicture","GET",r,"blob");return t?userProfilePicturePreviewCache[e]=a:userProfilePictureCache[e]=a,a}catch(e){throw e}}async function GetUserToDoListByExperience(e,t,r,a){try{let i={experienceId:e};return t&&(i.searchText=t),r&&(i.takeOffset=r),a&&(i.takeCount=a),await apiCall("GetUserToDoListByExperience","GET",i,"json")}catch(e){throw e}}async function GetUserFriendListByUser(e,t,r,a,i,c){try{let n={userId:e};return t&&(n.searchText=t),r&&(n.isAlsoNotActive=r),a&&(n.isRandom=a),i&&(n.takeOffset=i),c&&(n.takeCount=c),await apiCall("GetUserFriendListByUser","GET",n,"json")}catch(e){throw e}}async function GetCurrentUserFriend(e){try{let t={userId:e};return await apiCall("GetCurrentUserFriend","GET",t,"json")}catch(e){throw e}}async function InsertUser(e,t,r,a,i,c,n,s,o,l,u,p){try{let d={nickname:e,name:t,surname:r,mail:u,password:p};return a&&(d.profilePhotoFile=a),i&&(d.description=i),c&&(d.birthdate=c),n&&(d.residencePlaceName=n),s&&(d.residencePlaceDescription=s),o&&(d.residencePlaceLatitude=o),l&&(d.residencePlaceLongitude=l),await apiCall("InsertUser","POST",d,"json")}catch(e){throw e}}async function UpdateUser_PersonalInformations(e,t,r,a,i,c,n,s,o,l,u,p){try{let d={userId:e,name:t,surname:r};return a&&(d.profilePhotoFileId=a),s&&(d.residencePlaceId=s),i&&(d.profilePhotoFile=i),o&&(d.residencePlaceName=o),l&&(d.residencePlaceDescription=l),u&&(d.residencePlaceLatitude=u),p&&(d.residencePlaceLongitude=p),c&&(d.description=c),n&&(d.birthdate=n),await apiCall("UpdateUser_PersonalInformations","POST",d,"json")}catch(e){throw e}}async function UpdateUser_Password(e,t){try{let r={password:e,passwordNew:t};return await apiCall("UpdateUser_Password","POST",r,"json")}catch(e){throw e}}async function UpdateUser_Mail(e,t){try{let r={password:e,mailNew:t};return await apiCall("UpdateUser_Mail","POST",r,"json")}catch(e){throw e}}async function RequestUser_Contact(e,t){try{let r={userId:e,message:t};return await apiCall("RequestUser_Contact","GET",r,"json")}catch(e){throw e}}async function GetPlaceList(e,t,r,a=!1,i,c){try{let n={};return t&&(n.searchText=t),e&&(n.morningNightEnum=e),r&&(n.isToDo=r),param_userId&&(n.userId=param_userId),a&&(n.isRandom=a),i&&(n.takeOffset=i),c&&(n.takeCount=c),await apiCall("GetPlaceList","GET",n,"json")}catch(e){throw console.error(e),e}}async function GetPlacePicture(e,t=!1){if(!t&&placeProfilePictureCache[e])return placeProfilePictureCache[e];if(t&&placeProfilePicturePreviewCache[e])return placeProfilePicturePreviewCache[e];try{let r={pictureId:e,isPreview:t},a=await apiCall("GetPlacePicture","GET",r,"blob");return t?placeProfilePicturePreviewCache[e]=a:placeProfilePictureCache[e]=a,a}catch(e){throw e}}async function GetDefaultPlacePicture(e,t=!0){try{let r={placeId:e,isPreview:t};return await apiCall("GetDefaultPlacePicture","GET",r,"blob")}catch(e){throw e}}async function GetExperienceMedia(e,t=!1){if(!t&&experienceMediaCache[e])return experienceMediaCache[e];if(t&&experienceMediaPreviewCache[e])return experienceMediaPreviewCache[e];{let r="GetExperienceMedia";try{let a={mediaId:e,isPreview:t},i=await apiCall(r,"GET",a,"blob",!0);return t?experienceMediaPreviewCache[e]=i:experienceMediaCache[e]=i,i}catch(e){throw e}}}async function GetDefaultExperienceMediaByPlace(e,t,r){try{let a={placeId:e,morningNightEnum:t};return r&&(a.isToDo=r),param_userId&&(a.userId=param_userId),await apiCall("GetDefaultExperienceMediaByPlace","GET",a,"json",!0)}catch(e){throw e}}async function UpsertExperience(e,t,r,a,i,c,n,s,o,l,u,p,d,h,w){try{let P={name:a,statusEnum:w?0:1};return e&&(P.id=e),s&&(P.fileId=s),l&&(P.placeId=l),t&&(P.date=t),i&&(P.description=i),c&&(P.morningNightEnum=c),n&&(P.privacyLevel=n),o&&(P.file=o),u&&(P.placeName=u),p&&(P.placeDescription=p),d&&(P.placeLatitude=d),h&&(P.placeLongitude=h),r&&(P.time=r),await apiCall("UpsertExperience","POST",P,"json")}catch(e){throw e}}async function DeleteExperience(e){try{let t={experienceId:e};return await apiCall("DeleteExperience","GET",t,"json")}catch(e){throw e}}async function GetExperienceList(e,t,r,a,i=!1,c=!1,n,s){try{let o={};return a&&(o.searchText=a),t&&(o.morningNightEnum=t),e&&(o.placeId=e),r&&(o.isToDo=r),param_userId&&(o.userId=param_userId),i&&(o.isAlsoDraft=i),c&&(o.isRandom=c),n&&(o.takeOffset=n),s&&(o.takeCount=s),await apiCall("GetExperienceList","GET",o,"json")}catch(e){throw e}}async function GetExperience(e){try{let t={experienceId:e};return await apiCall("GetExperience","GET",t,"json")}catch(e){throw e}}async function AddUserExperienceToDo(e){try{let t={experienceId:e};return await apiCall("AddUserExperienceToDo","GET",t,"json")}catch(e){throw e}}async function RemoveUserExperienceToDo(e){try{let t={experienceId:e};return await apiCall("RemoveUserExperienceToDo","GET",t,"json")}catch(e){throw e}}async function AddUserFriend(e){try{let t={userFriendId:e};return await apiCall("AddUserFriend","GET",t,"json")}catch(e){throw e}}async function RemoveUserFriend(e){try{let t={userFriendId:e};return await apiCall("RemoveUserFriend","GET",t,"json")}catch(e){throw e}}async function ConfirmUserFriend(e){try{let t={userFriendId:e};return await apiCall("ConfirmUserFriend","GET",t,"json")}catch(e){throw e}}