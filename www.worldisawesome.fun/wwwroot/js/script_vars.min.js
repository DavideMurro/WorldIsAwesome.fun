const siteUrl = window.location.origin + "/", apiUri = siteUrl + "Api/", viewUri = siteUrl + "View/", urlCreator = window.URL || window.webkitURL, screenWidthLimitMax = 767, queryString = window.location.search, urlParams = new URLSearchParams(queryString), param_userId = urlParams.get("UserId"), param_placeId = urlParams.get("PlaceId"), param_experienceId = urlParams.get("ExperienceId"), param_morningNightEnum = urlParams.get("MorningNightEnum"), param_viewTypeEnum = urlParams.get("ViewTypeEnum"), param_redirect = urlParams.get("Redirect"), myPageLoadEvent = new CustomEvent("myOnPageLoad"), myInitCompletedEvent = new CustomEvent("myOnInitCompleted"); var appStatus, userLogged, userStatus, currentUser, isUserMine, currentUserFriend, currentPlace, isPlaceMine, currentExperience, isExperienceMine, myearth, autoRotate, currentMarker, viewType, morningNight, isPageLoad = !1, isInitCompleted = !1, isHomeWorldViewScrollEnable = !0, isFirstWorldView = !0, isFirstHomeView = !0, appStatusMap = ["Default", "Loading", "Ready", "Error"], userStatusMap = ["Default", "Logged", "NotLogged"], placeList = [], markerList = [], markerScale = 1, viewTypeMap = ["Default", "ViewMyPlaces", "ViewGlobalPlaces", "ViewExperiencesToDo", "ViewFriends"], morningNightMap = ["Default", "Morning", "Night", "Evening"], editor_configuration = { buttonList: [["undo", "redo"], ["fontSize"], ["bold", "underline", "italic", "strike"], ["fontColor", "hiliteColor"], ["align", "horizontalRule", "list", "lineHeight"], ["table", "link", "image", "video", "audio"]], width: "100%", minHeight: "20em", stickyToolbar: null, showPathLabel: !1, charCounter: !0, charCounterType: "byte-html", charCounterLabel: "Size :", maxCharCount: 1e6 }; window.addEventListener("load", async () => { try { let e = document.getElementsByClassName("popup-container"); Array.from(e).forEach(e => { new Hammer(e).on("tap", e => { e.target.classList.contains("popup-container") && e.target.onclose && e.target.onclose() }) }) } catch (t) { console.warn("Hammerjs doesn t exists or error") } isPageLoad = !0, window.dispatchEvent(myPageLoadEvent) }); var debounce = (e, t) => { let r; return function () { let a = this, o = arguments; clearTimeout(r), r = setTimeout(() => e.apply(a, o), t) } }, capitalize = e => "string" != typeof e ? "" : e.charAt(0).toUpperCase() + e.slice(1); async function sleep(e) { return new Promise(t => { setTimeout(t, e) }) } function isEquals(e, t, r = !1) { return r ? e === t : "string" == typeof e && "string" == typeof t ? 0 === e.localeCompare(t, void 0, { sensitivity: "accent" }) : e === t } function setUserStatus(e) { userStatusMap.forEach(e => { document.body.classList.remove(e.toLowerCase()) }), document.body.classList.add(e.toLowerCase()), userStatus = e } function setAppStatus(e, t) { document.querySelector("#app-status-container #app-status-error-container").innerHTML = "", document.querySelector("#app-status-container #app-status-loading-container").innerHTML = "", appStatusMap.forEach(e => { document.body.classList.remove(e.toLowerCase()) }), e == appStatusMap[3] ? document.querySelector("#app-status-container #app-status-error-container").innerHTML = t || "There is an error. <br/> <a href='/' title='Home'>Go Home</a>" : e == appStatusMap[1] && (document.querySelector("#app-status-container #app-status-loading-container").innerHTML = t || ""), document.body.classList.add(e.toLowerCase()), appStatus = e } function setMorningNight(e) { morningNightMap.forEach(e => { document.body.classList.remove(e.toLowerCase()) }), document.body.classList.add(e.toLowerCase()), morningNight = e } function setView(e) { viewTypeMap.forEach(e => { document.body.classList.remove(e.toLowerCase()) }), e && viewTypeMap.findIndex(t => t == e) > 0 && (document.body.classList.add(e.toLowerCase()), viewType = e) } async function openPopup(e) { return document.getElementById(e).classList.add("active"), await sleep(200), document.body.classList.add("popup-active"), !0 } async function closePopup(e) { return document.getElementById(e).classList.remove("active"), await sleep(200), document.body.classList.remove("popup-active"), !0 } async function closeAllPopup() { let e = document.getElementsByClassName("popup-container"); for (let t = 0; t < e.length; t++)e[t].classList.remove("active"); return document.body.classList.remove("popup-active"), !0 } function isPopupOpen(e) { return document.getElementById(e).classList.contains("active") } async function openPopupError(e) { return document.querySelector("#error-popup .popup-body").innerHTML = e, openPopup("error-popup").then(() => { document.getElementById("error-ok-button").focus() }), !0 } async function openPopupSuccess(e, t) { return document.querySelector("#success-popup .popup-body").innerHTML = "", document.getElementById("success-ok-button").onclick = null, document.querySelector("#success-popup .popup-body").innerHTML = e, t && (document.getElementById("success-ok-button").onclick = () => { window.location.href = t }), openPopup("success-popup").then(() => { document.getElementById("success-ok-button").focus() }), !0 } async function searchLocation(e, t) { let r = document.querySelector("#" + e + " .input"), a = document.querySelector("#" + e + " .search-results-container"), o = document.querySelector("#" + e + " .remove-button"); if (!a) { let n = document.createElement("div"); n.className = "search-results-container", document.getElementById(e).appendChild(n), a = document.querySelector("#" + e + " .search-results-container") } a.classList.remove("d-none"), a.innerHTML = "<small class='search-noresult'>Loading...</small>", o && o.classList.add("d-none"); try { (data = await (await fetch("https://photon.komoot.io/api/?q=" + r.value + "&layer=county&limit=50")).json()).features.length <= 0 ? a.innerHTML = "<small class='search-noresult'>No results! Where did you go??</small>" : (a.innerHTML = "", data.features.forEach((r, o) => { let n = { name: r.properties.country + ", " + r.properties.state + ", " + r.properties.name, latitude: r.geometry.coordinates[1].toFixed(8), longitude: r.geometry.coordinates[0].toFixed(8) }, s = document.createElement("label"); s.setAttribute("for", "search-result-location" + o), s.className = "search-result", s.innerHTML = "<input type='radio' name='search-result-location' id='search-result-location" + o + "' value='" + JSON.stringify(n) + "' >" + n.name, s.addEventListener("change", r => { selectResultLocation(r.target, e, t) }), a.appendChild(s) })) } catch (s) { throw a.innerHTML = "<small class='search-noresult error-color'>There s an error! I don t know why. Please try again in a few minutes</small>", s } } async function selectResultLocation(e, t, r) { let a = document.querySelector("#" + t + " .search-results-container"), o = document.querySelectorAll("#" + t + " .search-result"), n = document.querySelector("#" + t + " .input"), s = document.querySelector("#" + t + " .remove-button"); o.forEach(e => { e.classList.remove("active") }), e.parentElement.classList.add("active"), n.value = e.parentElement.textContent, a.classList.add("d-none"), s && s.classList.remove("d-none"), r && r() }